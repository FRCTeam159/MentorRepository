#pragma once
#ifndef APP_TEST

#include <opencv2/objdetect/objdetect.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/core/core.hpp>
#include <opencv2/features2d.hpp>

#include "opencv2/core/cuda_types.hpp"
#include "opencv2/core/cuda.inl.hpp"
#include "opencv2/cudaimgproc.hpp"
#include "opencv2/cudawarping.hpp"
#include "opencv2/highgui.hpp"

//using namespace cv;
using namespace std;

#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <map>
#include <vector>
#include <string>
#include <math.h>
#include "llvm/StringRef.h"
#include "llvm/ArrayRef.h"

#define USE_GPU

using namespace cv::cuda;

/**
* A representation of the different types of blurs that can be used.
*
*/
enum BlurType {
	BOX, GAUSSIAN, MEDIAN, BILATERAL
};
/**
* GripPipeline class.
* 
* An OpenCV pipeline generated by GRIP.
*/
class GripPipeline {
	private:
		cv::Mat colorThresholdOutput;

        std::vector<std::vector<cv::Point> > vecInput;
        std::vector<std::vector<cv::Point> > vecOutput;

		std::vector<std::vector<cv::Point> > returnVector;
		std::vector<cv::Rect> returnRectangles;

		void blur(cv::Mat &, BlurType &, double , cv::Mat &);
		void findContours(cv::Mat &, bool , std::vector<std::vector<cv::Point> > &);
		void convexHulls(std::vector<std::vector<cv::Point> > &, std::vector<std::vector<cv::Point> > &);
		void filterContours(std::vector<std::vector<cv::Point> > &, double , double , double , double , double , double , double [], double , double , double , double , std::vector<std::vector<cv::Point> > &);
		void findRectangles(std::vector<std::vector<cv::Point> > &inputContours, std::vector<cv::Rect> &output);

		llvm::ArrayRef<double>  hsvThresholdHue = {71, 115};
		llvm::ArrayRef<double>  hsvThresholdSaturation = {134, 255};
		llvm::ArrayRef<double>  hsvThresholdValue = {121, 211};

	public:
		GripPipeline();
		void process(cv::Mat source0);
		cv::Mat* getColorThresholdOutput();
		std::vector<cv::Rect>*getRectangles(){
			return &returnRectangles;
		}

		void setHSVThresholdHue(llvm::ArrayRef<double> value) { hsvThresholdHue=value;}
		void setHSVThresholdSaturation(llvm::ArrayRef<double> value) {hsvThresholdSaturation =value;}
		void setHSVThresholdValue(llvm::ArrayRef<double> value) {hsvThresholdValue = value;}
		llvm::ArrayRef<double> getHSVHue() { return hsvThresholdHue;}
		llvm::ArrayRef<double> getHSVSaturation() {return hsvThresholdSaturation;}
		llvm::ArrayRef<double> getHSVValue() {return hsvThresholdValue;}
};

#endif
//} // end namespace grip


